SOpe tp 09-02

exercise sheet 1

1. ------------------------ 
a)false
b) -wall  (faz com que o makefile mostre warnings, neste caso, avisaria que uma variável não está a ser usada)
#include <stdio.h>

int main()
{
    printf("Program run!\n");
    int i=10;
}

--- compilação: sistemas operativos: gerir processos e recursos a que cada processo pode aceder e manipular
- gerir processos: quando corre, quando espera, a que recursos tem acesso

2. linkagem dinâmica e estática: 
- linkagem estática: em tempo de compilação junta todas as bibiotecas que precisamos para correr
- linkagem dinâmica: bibliotecas geradas separadmente e são juntas ao correr o executável
vantagens e desvantagens:
- estática: ocupa menos espaço, mas pode ser pior em termos de performance
- dinâmica: 

3. ciclo de vida de um programa em c: programas terminam de forma graciosa, termina com mensagem "terminou corretamente"

ou.. é interrompido e terminado de forma forçada
atexit -> regista funçẽos que quando programa termina, são executadas antes do processo terminar

The C library function int atexit(void (*func)(void)) causes the specified function func to be called when the program terminates. You can register your termination function anywhere you like, but it will be called at the time of the program termination.

#include <stdio.h>
#include <stdlib.h>

void functionA () {
   printf("This is functionA\n");
}

int main () {
   /* register the termination function */
   atexit(functionA );
   
   printf("Starting  main program...\n");

   printf("Exiting main program...\n");

   return(0);
}

4. uma parte do sistema é protegido do acesso dos utilizadores comum: acesso a dispositivos IO, etc... apenas pode ser acedido com previlégios de kernel


5.interação entre programas que criamos e o ambiente
particular: shell 

int main(int argc, char* argv[], char* env[]){
	
}

./a.out PATH USER partir a str em dois no = 
strtok(=)
strcmp

./ficheiro.out op1 op2
cmd args:
op1
op2
env vars:


mensagem de erro pode ser redirecionada o std outuput - ./a.out > log.log 
./a.out > lop.log 2> erro.log (redirecionar std error)


6. perror lê o errno e devolve o erro que está a acontecer


7. 
